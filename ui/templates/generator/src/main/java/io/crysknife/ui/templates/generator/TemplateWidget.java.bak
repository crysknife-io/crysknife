/*
 * Copyright (C) 2012 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gwtproject.user.client.ui;

import java.util.Collection;
import java.util.Iterator;

import elemental2.dom.DomGlobal;
import elemental2.dom.HTMLElement;
import io.crysknife.ui.templates.client.annotation.Templated;
import jsinterop.base.Js;
import org.gwtproject.dom.client.Element;

/**
 * Used to merge a {@link Templated} onto a {@link Composite} component.
 * @author <a href="mailto:lincolnbaxter@gmail.com">Lincoln Baxter, III</a>
 */
public class TemplateWidget extends SimplePanel {

    private final Collection<Widget> children;

    public TemplateWidget(final Element root, final Collection<Widget> children) {
        this.setElement(root);
        this.children = children;
        doInit();
    }

    public TemplateWidget(final IsWidget root, final Collection<Widget> children) {
        this.children = children;
        doInit();
    }

    private void doInit() {
        for (Widget child : children) {
            if (!child.isAttached()) {
                if (!(child instanceof TemplateWidget) && child.getParent() instanceof TemplateWidget) {
                    child = child.getParent();
                }
                if (child.getParent() instanceof HasWidgets) {
                    child.removeFromParent();
                }
                adopt(child);
            }


            //if (!child.isAttached()) {
            //    child.onAttach();
            //}
        }
    }

    public static void initTemplated(final Element wrapped, final Collection<Widget> dataFields) {
        // All template fragments are contained in a single element, during initialization.
        wrapped.removeFromParent();
        final TemplateWidget widget = new TemplateWidget(wrapped, dataFields);
        widget.onAttach();
        try {
            RootPanel.detachOnWindowClose(widget);
        } catch (Exception e) {

        }
    }

    public static void initTemplated(final IsWidget component, final HTMLElement wrapped, final Collection<Widget> dataFields) {
        // All template fragments are contained in a single element, during initialization.
        component.asWidget().removeFromParent();
        final TemplateWidget widget = new TemplateWidget(component, dataFields);
        if(component instanceof Composite) {
            ((Composite)component).initWidget(wrapElemental2(wrapped));
        }

        //widget.doDetachChildren();

        widget.onAttach();

        try {
            RootPanel.detachOnWindowClose(widget);
        } catch (Exception e) {

        }
    }

    public static Widget wrapElemental2(HTMLElement element) {
        return new FocusWidget(Js.uncheckedCast(element)) {};
    }

    @Override
    public Iterator<Widget> iterator() {
        return children.iterator();
    }

    @Override
    public boolean remove(final Widget child) {
        if (child.getParent() != this) {
            return false;
        }
        orphan(child);
        child.getElement().removeFromParent();
        return children.remove(child);
    }
}

